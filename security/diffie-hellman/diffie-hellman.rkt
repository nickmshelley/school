#lang racket
(require rackunit)

(define p 3660074356288457536446266188454355660772969140105659199256265853827624419172622053002165243290437080198739732869838099522030942643173797810463969023951907291654997179)
(define g 5)
(define s 3599131035634557106248430806148785487095757694641533306480604458089470064537190296255232548883112685719936728506816716098566612844395439751206812144692131084107776)

(define (modular-expt base exponent mod)
  (let loop ([result 1]
             [b base]
             [e exponent])
    (if (<= e 0)
        result
        (loop (if (odd? e) (modulo (* result b) mod) result)
              (modulo (* b b) mod)
              (arithmetic-shift e -1)))))
(check-equal? (modular-expt 3 2 5) 4)
(check-equal? (modular-expt 2 8 255) 1)
(check-equal? (modular-expt g s p) 1522762728733093584246082731814213802527903499438711000272371780935430413616451728877444975627039674525704095180070460137758887414132987926843395392785313225395231515)